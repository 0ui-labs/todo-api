#!/usr/bin/env python3
"""
Pre-Task Hook for Claude Code
Analyzes incoming tasks and automatically suggests relevant documentation guides.
"""

import sys
from typing import Dict

# Keywords that trigger specific guide consultation
PYTHON_GUIDE_TRIGGERS = {
    # Code quality and standards
    "implement", "develop", "code", "function", "class", "method",
    "refactor", "optimize", "improve", "clean", "restructure",
    
    # Testing
    "test", "testing", "unittest", "pytest", "coverage", "tdd",
    
    # Debugging and errors
    "debug", "error", "exception", "fix", "bug", "issue",
    
    # Security and performance
    "security", "secure", "authentication", "performance", "optimize",
    
    # Database
    "database", "model", "schema", "migration", "sql", "query",
    
    # API
    "api", "endpoint", "route", "rest", "fastapi",
}

PRP_FRAMEWORK_TRIGGERS = {
    # PRP specific
    "prp", "product requirement", "requirement prompt",
    
    # Planning and architecture
    "plan", "design", "architect", "structure", "blueprint",
    
    # Feature development
    "feature", "epic", "story", "specification", "spec",
    
    # Validation
    "validate", "validation", "acceptance", "criteria",
}

# Slash commands that trigger PRP framework
PRP_SLASH_COMMANDS = {
    "/prp-spec-create",
    "/prp-planning-create", 
    "/prp-task-execute",
    "/prp-task-create",
    "/prp-base-create",
    "/task-list-init",
    "/prp-spec-execute",
    "/api-contract-define",
    "/prp-base-execute",
    # Also include rapid development PRP commands
    "/create-base-prp-parallel",
    "/parallel-prp-creation",
    "/prp-analyze-run",
    "/prp-validate",
    "/hackathon-prp-parallel",
}

def analyze_task(task_description: str) -> Dict[str, bool]:
    """
    Analyze the task description to determine which guides are needed.
    
    Args:
        task_description: The user's task request
        
    Returns:
        Dictionary indicating which guides should be consulted
    """
    task_lower = task_description.lower()
    
    # Check for Python guide triggers
    needs_python_guide = any(
        keyword in task_lower 
        for keyword in PYTHON_GUIDE_TRIGGERS
    )
    
    # Check for PRP framework triggers - keywords
    needs_prp_framework = any(
        keyword in task_lower 
        for keyword in PRP_FRAMEWORK_TRIGGERS
    )
    
    # Check for PRP slash commands (case-sensitive)
    if not needs_prp_framework:
        needs_prp_framework = any(
            cmd in task_description 
            for cmd in PRP_SLASH_COMMANDS
        )
    
    # Special cases
    if any(phrase in task_lower for phrase in [
        "neue funktion", "new feature", "implement", "entwickle"
    ]):
        needs_python_guide = True
        
    if "prp" in task_lower or "requirement" in task_lower:
        needs_prp_framework = True
    
    return {
        "python_guide": needs_python_guide,
        "prp_framework": needs_prp_framework
    }

def generate_guide_prompt(guides_needed: Dict[str, bool]) -> str:
    """
    Generate a prompt to instruct Claude to consult specific guides.
    
    Args:
        guides_needed: Dictionary of guide requirements
        
    Returns:
        Formatted prompt for Claude
    """
    prompts = []
    
    if guides_needed["python_guide"]:
        prompts.append(
            "📚 PYTHON GUIDE REQUIRED: This task involves code development. "
            "Please consult docs/PYTHON-GUIDE.md for coding standards, testing requirements, "
            "and best practices before proceeding."
        )
    
    if guides_needed["prp_framework"]:
        prompts.append(
            "📋 PRP FRAMEWORK REQUIRED: This task involves planning or requirements. "
            "Please consult docs/PRP-FRAMEWORK.md for proper structure and validation gates."
        )
    
    if not prompts:
        return ""
    
    header = "🔍 AUTOMATIC GUIDE DETECTION:\n"
    footer = "\n\nProceed with the task after reviewing the relevant documentation."
    
    return header + "\n".join(prompts) + footer

def main():
    """Main entry point for the hook."""
    # Read task from stdin or command line
    if len(sys.argv) > 1:
        task = " ".join(sys.argv[1:])
    else:
        task = sys.stdin.read().strip()
    
    if not task:
        return
    
    # Analyze the task
    guides_needed = analyze_task(task)
    
    # Generate prompt if guides are needed
    guide_prompt = generate_guide_prompt(guides_needed)
    
    if guide_prompt:
        print(guide_prompt)
        print("-" * 60)
    
    # Always output the original task
    print(task)

if __name__ == "__main__":
    main()